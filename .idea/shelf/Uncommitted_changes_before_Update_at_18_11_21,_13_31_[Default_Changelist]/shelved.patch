Index: app/src/main/java/view/DicePanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\n\nimport controller.*;\nimport javax.swing.*;\nimport javax.swing.border.EmptyBorder;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class DicePanel implements ActionListener {\n\n    private FilePath FilePath = new FilePath();\n    private BufferedImage image = ImageLoader.loadImage(FilePath.getFilePath(\"GreenButton.png\"));\n    private JPanel finalPanel = new JPanel();\n    private JButton diceButton = new JButton();\n    private JLabel resultLabel = new JLabel();\n    private JPanel dicePanel = new JPanel();\n    private JLabel textLabel = new JLabel(\"WHITE PLAYER START\");\n    private JPanel textPanel = new JPanel();\n    private Game game;\n    private Random rand = new Random();\n    private Dice dice;\n\n    DicePanel(Game game) { \n        this.game = game;\n        dice = new Dice();    \n        initialize();\n    }\n\n    public void initialize() {\n        dicePanel.setLayout(new GridLayout(1, 2));\n        dicePanel.setBackground(Color.LIGHT_GRAY);\n        textPanel.setBackground(Color.LIGHT_GRAY);\n        finalPanel.setBackground(Color.LIGHT_GRAY);\n\n        finalPanel.setLayout(new GridLayout(2, 1));\n\n        diceButton.setIcon(new ImageIcon(image));\n        diceButton.setBackground(Color.LIGHT_GRAY);\n        diceButton.setBorderPainted(false);\n        diceButton.addActionListener(this);\n\n        resultLabel.setBorder(new EmptyBorder(2, 2, 2, 2));\n\n        textLabel.setFont(new Font(Font.SANS_SERIF,  Font.BOLD, 16));\n        textLabel.setForeground(Color.RED);\n\n        dicePanel.add(diceButton, 0, 0);\n        dicePanel.add(resultLabel, 0,1);\n\n        textPanel.add(textLabel);\n\n        finalPanel.add(dicePanel);\n        finalPanel.add(textPanel);\n    }\n\n    public JPanel getDicePanel() { return finalPanel; }\n\n    @Override\n    /**\n     * Dice\n     * At the moment it only works for the white pieces\n     */\n\n    public void actionPerformed(ActionEvent e) {\n        \n        if(e.getSource() == diceButton) {\n            game.updateBoard();\n            if(!game.isNewTurn()) return; \n            else{\n\n                // Set who's turn is it on the board\n                if (game.getWhitePlayer().getIsMyTurn()) {\n                    if (game.isNoMoves()) {\n                        this.textLabel.setText(\"NO MOVES AVAILABLE, BLACK'S TURN!\");\n                    } else {\n                        this.textLabel.setText(\"WHITE PLAYER'S TURN\");\n                    }\n\n                } else {\n                    if (game.isNoMoves()) {\n                        this.textLabel.setText(\"NO MOVES AVAILABLE, WHITE'S TURN!\");\n                    } else {\n                        this.textLabel.setText(\"BLACK PLAYER'S TURN\");\n                    }\n                }\n                System.out.println(game.isNoMoves());\n\n                //game.newTurn();\n                game.setDiceClicked(true);\n               // game.getDice().randomize();\n                //String name =  game.getDice().getRoleDice();\n                String name;\n                if(game.getWhitePlayer().getIsMyTurn()){\n                    ArrayList<String> movable = game.getWhitePlayer().getMovableNames();\n                    name = game.getDice().getRndPiece(movable);\n                }\n                else{\n                    ArrayList<String> movable = game.getBlackPlayer().getMovableNames();\n                    name = game.getDice().getRndPiece(movable);    \n                }\n                switch (name){\n                    case \"Pawn\":\n                        if(game.getWhitePlayer().getIsMyTurn()){\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"wpawn.png\"))));\n                            break;\n                        }\n                        else{\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"bpawn.png\"))));\n                            break;\n                        }\n\n                    case \"Rook\":\n                        if(game.getWhitePlayer().getIsMyTurn()){\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"wrook.png\"))));\n                            break;\n                        }\n                    else{\n                        resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"brook.png\"))));\n                        break;\n                    }\n\n                    case \"Knight\":\n                        if(game.getWhitePlayer().getIsMyTurn()){\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"wknight.png\"))));\n                            break;\n                        }\n                    else{\n                        resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"bknight.png\"))));\n                        break;\n                    }\n\n                    case \"Bishop\":\n                        if(game.getWhitePlayer().getIsMyTurn()){\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"wbishop.png\"))));\n                            break;\n                        }\n                        else{\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"bbishop.png\"))));\n                            break;\n                            }\n\n                    case \"Queen\":\n                    if(game.getWhitePlayer().getIsMyTurn()){\n                        resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"wqueen.png\"))));\n                        break;\n                    }\n                    else{\n                        resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"bqueen.png\"))));\n                        break;\n                    }\n\n                    case \"King\":\n                        if(game.getWhitePlayer().getIsMyTurn()){\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"wking.png\"))));\n                            break;\n                        }\n                        else{\n                            resultLabel.setIcon(new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath(\"bking.png\"))));\n                            break;\n                        }\n                    }\n                game.play();\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/view/DicePanel.java b/app/src/main/java/view/DicePanel.java
--- a/app/src/main/java/view/DicePanel.java	(revision c457d95107ee30a7d0fa9c7e8df073e671a30fd1)
+++ b/app/src/main/java/view/DicePanel.java	(date 1637238419906)
@@ -13,7 +13,7 @@
 public class DicePanel implements ActionListener {
 
     private FilePath FilePath = new FilePath();
-    private BufferedImage image = ImageLoader.loadImage(FilePath.getFilePath("GreenButton.png"));
+    private ImageIcon image = new ImageIcon(ImageLoader.loadImage(FilePath.getFilePath("GreenButton.png")));
     private JPanel finalPanel = new JPanel();
     private JButton diceButton = new JButton();
     private JLabel resultLabel = new JLabel();
@@ -38,7 +38,7 @@
 
         finalPanel.setLayout(new GridLayout(2, 1));
 
-        diceButton.setIcon(new ImageIcon(image));
+        diceButton.setIcon(image);
         diceButton.setBackground(Color.LIGHT_GRAY);
         diceButton.setBorderPainted(false);
         diceButton.addActionListener(this);
