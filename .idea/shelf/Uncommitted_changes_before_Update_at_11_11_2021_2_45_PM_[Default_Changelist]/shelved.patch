Index: app/src/main/java/view/SetupMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.Game;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class SetupMenu {\r\n    private JFrame frame;\r\n    private int WIDTH =750;\r\n    private int HEIGHT=480;\r\n    private String GameMode= \"PvP\";//default\r\n    private String GameColour= \"Black\";//default\r\n\r\n    public SetupMenu(){\r\n        create();\r\n    }\r\n\r\n    private void PrintGame(){\r\n        System.out.println();\r\n        System.out.println(\"GAME MODE: \"+GameMode);\r\n        System.out.println(\"GAME COLOUR: \"+GameColour);\r\n    }\r\n\r\n    public void create() {\r\n\r\n        frame = new JFrame();\r\n        frame.getContentPane().setBackground(Color.DARK_GRAY);\r\n        //frame.setBounds(400, 100, WIDTH, HEIGHT);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        frame.setResizable(false);\r\n        frame.setLayout(new BorderLayout());\r\n        frame.setVisible(true);\r\n\r\n        //MAIN PANELS\r\n\r\n        JPanel PanelTop = new JPanel();\r\n        PanelTop.setBackground(Color.DARK_GRAY);\r\n        PanelTop.setPreferredSize(new Dimension(WIDTH,HEIGHT/10));\r\n        frame.add(PanelTop,BorderLayout.NORTH);\r\n        PanelTop.setLayout(null);\r\n\r\n        JPanel PanelMiddle = new JPanel();\r\n        PanelMiddle.setBackground(Color.LIGHT_GRAY);\r\n        PanelMiddle.setPreferredSize(new Dimension(WIDTH,HEIGHT/10));\r\n        frame.add(PanelMiddle,BorderLayout.CENTER);\r\n        PanelMiddle.setLayout(null);\r\n\r\n        JPanel PanelBottom = new JPanel();\r\n        PanelBottom.setBackground(Color.DARK_GRAY);\r\n        PanelBottom.setPreferredSize(new Dimension(WIDTH,HEIGHT/10));\r\n        frame.add(PanelBottom,BorderLayout.SOUTH);\r\n        PanelBottom.setLayout(null);\r\n\r\n        //SUB PANELS\r\n\r\n        JPanel PanelMidLeft = new JPanel();\r\n        PanelMidLeft.setBackground(Color.WHITE);\r\n        PanelMidLeft.setBounds(30,20,250,300);\r\n        PanelMiddle.add(PanelMidLeft);\r\n        PanelMidLeft.setLayout(new BorderLayout());\r\n\r\n        JPanel PanelMidRight = new JPanel();\r\n        PanelMidRight.setBackground(Color.WHITE);\r\n        PanelMidRight.setBounds(WIDTH-265-30,20,250,300);\r\n        PanelMiddle.add(PanelMidRight);\r\n        PanelMidRight.setLayout(new BorderLayout());\r\n\r\n        // SUB SUB PANELS\r\n        JPanel PanelMidLeftUp = new JPanel();\r\n        PanelMidLeftUp.setBackground(Color.WHITE);\r\n        PanelMidLeftUp.setPreferredSize(new Dimension(WIDTH,HEIGHT/10));\r\n        PanelMidLeft.add(PanelMidLeftUp,BorderLayout.NORTH);\r\n        PanelMidLeftUp.setLayout(null);\r\n\r\n        JPanel PanelMidLeftCenter = new JPanel();\r\n        PanelMidLeftCenter.setBackground(Color.WHITE);\r\n        PanelMidLeft.add(PanelMidLeftCenter,BorderLayout.CENTER);\r\n        PanelMidLeftCenter.setLayout(null);\r\n\r\n        JPanel PanelMidRighttUp = new JPanel();\r\n        PanelMidRighttUp.setBackground(Color.WHITE);\r\n        PanelMidRighttUp.setPreferredSize(new Dimension(WIDTH,HEIGHT/10));\r\n        PanelMidRight.add(PanelMidRighttUp,BorderLayout.NORTH);\r\n        PanelMidRighttUp.setLayout(null);\r\n\r\n        JPanel PanelMidRightCenter = new JPanel();\r\n        PanelMidRightCenter.setBackground(Color.WHITE);\r\n        PanelMidRight.add(PanelMidRightCenter,BorderLayout.CENTER);\r\n        PanelMidRightCenter.setLayout(null);\r\n\r\n        //LABELS\r\n\r\n        JLabel LabelTopTitle = new JLabel(\"WELCOME TO DICE CHESS\");\r\n        LabelTopTitle.setBounds(175, 0, WIDTH/2, HEIGHT/10);\r\n        PanelTop.add(LabelTopTitle);\r\n        LabelTopTitle.setForeground(Color.WHITE);\r\n        LabelTopTitle.setBackground(new Color(240, 240, 240));\r\n        LabelTopTitle.setHorizontalAlignment(SwingConstants.CENTER);\r\n        LabelTopTitle.setFont(new Font(\"SansSerif\", Font.BOLD, 28));\r\n\r\n        JLabel LabelBottomTitle = new JLabel(\"When Ready, Press here to play:\");\r\n        LabelBottomTitle.setBounds(250, 0, WIDTH/2, HEIGHT/10);\r\n        PanelBottom.add(LabelBottomTitle);\r\n        LabelBottomTitle.setForeground(Color.WHITE);\r\n        LabelBottomTitle.setBackground(new Color(240, 240, 240));\r\n        LabelBottomTitle.setHorizontalAlignment(SwingConstants.CENTER);\r\n        LabelBottomTitle.setFont(new Font(\"SansSerif\", Font.BOLD, 23));\r\n\r\n\r\n        JLabel LabelTeam = new JLabel(\"TEAM\");\r\n        LabelTeam.setForeground(Color.BLACK);\r\n        LabelTeam.setBounds(75, 3, 200, 50);\r\n        LabelTeam.setFont(new Font(\"Sitka Text\", Font.BOLD|Font.ITALIC, 30));\r\n        PanelMidLeftUp.add(LabelTeam);\r\n\r\n        JLabel LabelMode = new JLabel(\"MODE\");\r\n        LabelMode.setForeground(Color.BLACK);\r\n        LabelMode.setBounds(75, 3, 200, 50);\r\n        LabelMode.setFont(new Font(\"Sitka Text\", Font.BOLD|Font.ITALIC, 30));\r\n        PanelMidRighttUp.add(LabelMode);\r\n\r\n        //BUTTONS: RIGHT------------------------------------------------------------------------------------------------\r\n        //INITIALIZATION\r\n        JButton ButtonPvP= new JButton(\"P vs P\");\r\n        JButton ButtonPvAI= new JButton(\"P vs AI\");\r\n        JButton ButtonAIvAI= new JButton(\"AI vs AI\");\r\n\r\n        //PvP\r\n        ButtonPvP.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ButtonPvP.setBackground(Color.LIGHT_GRAY);\r\n                ButtonPvAI.setBackground(Color.WHITE);\r\n                ButtonAIvAI.setBackground(Color.WHITE);\r\n                GameMode=\"PvP\";\r\n                PrintGame();\r\n            }\r\n        });\r\n        ButtonPvP.setFont(new Font(\"Sitka Text\", Font.BOLD | Font.ITALIC, 12));\r\n        ButtonPvP.setForeground(Color.BLACK);\r\n        ButtonPvP.setFocusable(false);\r\n        ButtonPvP.setBackground(Color.WHITE);\r\n        ButtonPvP.setBounds(25, 20, 200, 50);\r\n        PanelMidRightCenter.add(ButtonPvP);\r\n\r\n        //PvAI\r\n        ButtonPvAI.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ButtonPvP.setBackground(Color.WHITE);\r\n                ButtonPvAI.setBackground(Color.LIGHT_GRAY);\r\n                ButtonAIvAI.setBackground(Color.WHITE);\r\n                GameMode=\"PvAI\";\r\n                PrintGame();\r\n            }\r\n        });\r\n        ButtonPvAI.setFont(new Font(\"Sitka Text\", Font.BOLD | Font.ITALIC, 12));\r\n        ButtonPvAI.setForeground(Color.BLACK);\r\n        ButtonPvAI.setFocusable(false);\r\n        ButtonPvAI.setBackground(Color.WHITE);\r\n        ButtonPvAI.setBounds(25, 100, 200, 50);\r\n        PanelMidRightCenter.add(ButtonPvAI);\r\n\r\n        //AIvAI\r\n        ButtonAIvAI.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ButtonPvP.setBackground(Color.WHITE);\r\n                ButtonPvAI.setBackground(Color.WHITE);\r\n                ButtonAIvAI.setBackground(Color.LIGHT_GRAY);\r\n                GameMode=\"AIvAI\";\r\n                PrintGame();\r\n            }\r\n        });\r\n        ButtonAIvAI.setFont(new Font(\"Sitka Text\", Font.BOLD | Font.ITALIC, 12));\r\n        ButtonAIvAI.setForeground(Color.BLACK);\r\n        ButtonAIvAI.setFocusable(false);\r\n        ButtonAIvAI.setBackground(Color.WHITE);\r\n        ButtonAIvAI.setBounds(25, 180, 200, 50);\r\n        PanelMidRightCenter.add(ButtonAIvAI);\r\n\r\n\r\n        //BUTTONS: LEFT-------------------------------------------------------------------------------------------------\r\n        //INITIALIZATION\r\n        JButton ButtonBlack= new JButton(\"Black\");\r\n        JButton ButtonWhite= new JButton(\"White\");\r\n\r\n\r\n        //BLACK\r\n        ButtonBlack.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ButtonBlack.setBackground(Color.LIGHT_GRAY);\r\n                ButtonWhite.setBackground(Color.WHITE);\r\n                GameColour=\"Black\";\r\n                PrintGame();\r\n            }\r\n        });\r\n        ButtonBlack.setFont(new Font(\"Sitka Text\", Font.BOLD | Font.ITALIC, 12));\r\n        ButtonBlack.setForeground(Color.BLACK);\r\n        ButtonBlack.setFocusable(false);\r\n        ButtonBlack.setBackground(Color.WHITE);\r\n        ButtonBlack.setBounds(25, 50, 200, 50);\r\n        PanelMidLeftCenter.add(ButtonBlack);\r\n\r\n        //WHITE\r\n        ButtonWhite.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                ButtonBlack.setBackground(Color.WHITE);\r\n                ButtonWhite.setBackground(Color.LIGHT_GRAY);\r\n                GameColour=\"White\";\r\n                PrintGame();\r\n            }\r\n        });\r\n        ButtonWhite.setFont(new Font(\"Sitka Text\", Font.BOLD | Font.ITALIC, 12));\r\n        ButtonWhite.setForeground(Color.BLACK);\r\n        ButtonWhite.setFocusable(false);\r\n        ButtonWhite.setBackground(Color.WHITE);\r\n        ButtonWhite.setBounds(25, 150, 200, 50);\r\n        PanelMidLeftCenter.add(ButtonWhite);\r\n\r\n        //BUTTON PLAY\r\n        JButton ButtonPlay= new JButton(\"PLAY\");\r\n        ButtonPlay.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                System.out.println(\"\\nLAUNCHING GAME.....\");\r\n                PrintGame();\r\n\r\n                startGamebaord(GameMode);\r\n                frame.dispose();\r\n            }\r\n        });\r\n        ButtonPlay.setFont(new Font(\"Sitka Text\", Font.BOLD | Font.ITALIC, 12));\r\n        ButtonPlay.setForeground(Color.BLACK);\r\n        ButtonPlay.setFocusable(false);\r\n        ButtonPlay.setBackground(Color.WHITE);\r\n        ButtonPlay.setBounds(650, 5, 70, 35);\r\n        PanelBottom.add(ButtonPlay);\r\n\r\n        frame.setBounds(400, 100, WIDTH-1, HEIGHT-1);\r\n        frame.setBounds(400, 100, WIDTH, HEIGHT);\r\n    }\r\n\r\n    public void startGamebaord(String mode) {\r\n        if(mode.equals(\"PvP\")){\r\n            JFrame f = new JFrame(\"Dice Chess\");\r\n            Game game = new Game(f);\r\n\r\n            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\r\n            f.setSize(screenSize.height + screenSize.height/2, screenSize.height - 50);\r\n            f.setLayout(new BorderLayout());\r\n            f.setBackground(Color.GREEN);\r\n\r\n            f.add(new SidePanel(game).getPane(), BorderLayout.WEST);\r\n            f.add(new MainPanel(game).getMainPanel(), BorderLayout.CENTER);\r\n\r\n            f.setResizable(false);\r\n            f.setLocationRelativeTo(null);\r\n            f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\r\n            f.setVisible(true);\r\n        }\r\n        else if(mode.equals(\"PvAI\")){\r\n            //TODO\r\n        }\r\n        else if(mode.equals(\"AIvAI\")){\r\n            //TODO\r\n        }\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/view/SetupMenu.java b/app/src/main/java/view/SetupMenu.java
--- a/app/src/main/java/view/SetupMenu.java	(revision 74f8e45c7572325eefe50f64508be21251dc3e5c)
+++ b/app/src/main/java/view/SetupMenu.java	(date 1636638301017)
@@ -243,8 +243,9 @@
 
     public void startGamebaord(String mode) {
         if(mode.equals("PvP")){
+            System.out.println("Mode: "+"PvP");
             JFrame f = new JFrame("Dice Chess");
-            Game game = new Game(f);
+            Game game = new Game(f,true);
 
             Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
             f.setSize(screenSize.height + screenSize.height/2, screenSize.height - 50);
@@ -260,10 +261,42 @@
             f.setVisible(true);
         }
         else if(mode.equals("PvAI")){
-            //TODO
+            System.out.println("Mode: "+"PvAI");
+            JFrame f = new JFrame("Dice Chess");
+            Game game = new Game(f,false);
+
+            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
+            f.setSize(screenSize.height + screenSize.height/2, screenSize.height - 50);
+            f.setLayout(new BorderLayout());
+            f.setBackground(Color.GREEN);
+
+            f.add(new SidePanel(game).getPane(), BorderLayout.WEST);
+            f.add(new MainPanel(game).getMainPanel(), BorderLayout.CENTER);
+
+            f.setResizable(false);
+            f.setLocationRelativeTo(null);
+            f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+            f.setVisible(true);
         }
         else if(mode.equals("AIvAI")){
-            //TODO
+            // TODO in phase3
+            //in that case, assume PvP
+            System.out.println("Mode: "+"PvP");
+            JFrame f = new JFrame("Dice Chess");
+            Game game = new Game(f,true);
+
+            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
+            f.setSize(screenSize.height + screenSize.height/2, screenSize.height - 50);
+            f.setLayout(new BorderLayout());
+            f.setBackground(Color.GREEN);
+
+            f.add(new SidePanel(game).getPane(), BorderLayout.WEST);
+            f.add(new MainPanel(game).getMainPanel(), BorderLayout.CENTER);
+
+            f.setResizable(false);
+            f.setLocationRelativeTo(null);
+            f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+            f.setVisible(true);
         }
 
     }
Index: app/src/main/java/controller/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport view.*;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\nimport javax.swing.ImageIcon;\r\nimport javax.swing.JFrame;\r\n\r\npublic class Game{\r\n\r\n    private ChessBoard cb;\r\n    public boolean newTurn=true;\r\n    private Dice dice;\r\n    private Player playing = null;\r\n    private WhitePlayer wPlayer;\r\n    private BaseLineAgent baseLinePlayer;\r\n    private ExpectiMaxAgent expectiMaxPlayer;\r\n    private BlackPlayer bPlayer;\r\n    private Piece heldPiece = null;\r\n    private ButtonPanel buttonPanel;\r\n    private boolean diceClicked=false;\r\n    private JFrame f;\r\n    private boolean noMoves = false;\r\n    private boolean noAgent = false;\r\n    private boolean baseLineActive = false;     // Make true to play with BaseLine Agent\r\n    private boolean expectiMaxActive = true;\r\n\r\n\r\n    /**\r\n     * Main Game Class, takes care of all buttons clicked by the listener and Gameplay situations\r\n     * @param f is the ChessBoard GUI Frame \r\n     */\r\n    \r\n    public Game(JFrame f){\r\n        this.f = f;\r\n        cb = new ChessBoard();\r\n        dice = new Dice();\r\n        bPlayer = new BlackPlayer(cb);\r\n        wPlayer = new WhitePlayer(cb);\r\n        buttonPanel= new ButtonPanel(this);\r\n    }\r\n    public JFrame getFrame(){\r\n        return f;\r\n    }\r\n    \r\n    public ChessBoard getChessBoard(){\r\n        return cb;\r\n    }\r\n    public void setNewChessBoard(){\r\n        this.cb = new ChessBoard();\r\n        \r\n    }\r\n    public boolean isNewTurn(){\r\n        return newTurn;\r\n    }\r\n    public Dice getDice(){\r\n        return dice;\r\n    }\r\n    public Player whosPlaying(){\r\n        return playing;\r\n    }\r\n    public void newTurn(){\r\n        newTurn=true;\r\n        diceClicked=false;\r\n        wPlayer.flipTurns(bPlayer);\r\n        updateBoard();\r\n    } \r\n    public void setButtonPanel(ButtonPanel buttonPanel){\r\n        this.buttonPanel = buttonPanel;\r\n    }\r\n    public void setDiceClicked(boolean b) {\r\n        diceClicked = b;\r\n    }\r\n    //public Castle getCastling(){ return castling;}\r\n    public WhitePlayer getWhitePlayer(){return wPlayer;}\r\n    public BlackPlayer getBlackPlayer(){return bPlayer;}\r\n\r\n    /**\r\n     * When Ever the Green Dice button is clicked by the user this method checks whether it is even a turn for the user\r\n     */\r\n    public void play(){\r\n        //noMoves = false;\r\n\r\n        if(wPlayer.getIsMyTurn()){        //if its w player's turn\r\n\r\n            playing = wPlayer;\r\n            newTurn= false;\r\n            String chosen = dice.getRoleDice(); //roll the dice\r\n            if(!wPlayer.canMove(chosen)){         //if player has no pieces to move we switch turns\r\n                //System.out.println(\"Sorry white , you have no possible moves. Turn goes to black\");\r\n                noMoves = true;\r\n                newTurn();\r\n            } else {\r\n                noMoves = false;\r\n            }\r\n        }\r\n\r\n        else if(bPlayer.getIsMyTurn()){\r\n\r\n        \t// Normal player (NO AGENT)\r\n        \tif (noAgent) {\r\n        \t\tplaying = bPlayer;\r\n        \t\tnewTurn= false;\r\n            \tString chosen = dice.getRoleDice();\r\n            \t//loop through all live pieces to see if dice chosen piece piece is there\r\n            \tfor(Piece p: cb.getLivePieces()){  \r\n            \t\tif(p.isWhite()){ continue; }   \r\n                \r\n            \t\tif(p.getPieceName().equals(chosen) ){ //if the chosen piece is not dead\r\n                        break;\r\n            \t\t}\r\n            \t}\r\n            \t\r\n            \tif(!bPlayer.canMove(chosen)){    \r\n            \t\t//System.out.println(\"Sorry black , you have no possible moves. Turn goes to white\");\r\n            \t\tnoMoves = true;\r\n            \t\tnewTurn();\r\n            \t} else {\r\n                    noMoves = false;\r\n                }\r\n        \t\r\n        \t// BASELINE AGENT\r\n        \t} else if (baseLineActive) {\r\n                baseLinePlayer = new BaseLineAgent(this, cb);\r\n            \tString chosen = dice.getRoleDice();\r\n            \tbaseLinePlayer.baseLinePlay(chosen);\r\n        \t\r\n        \t// EXPECTIMAX AGENT\r\n        \t} else if (expectiMaxActive) {\r\n                String chosen = dice.getRoleDice();\r\n                int depth = 4;\r\n                expectiMaxPlayer = new ExpectiMaxAgent(this, cb, chosen, depth, false);\r\n                expectiMaxPlayer.expectiMaxPlay();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This Method checks which button clicks are legal by the user and their correspondence to the ual \r\n     * In game play. \r\n     * @param clickedOnce a boolean that checks whether this click by the user is the first one or second\r\n     * @param clickedButton is the button that was clicked by the user\r\n     * @return true if the user is allowed to make these choices\r\n     */\r\n\r\n    public boolean isLegalChoice(boolean clickedOnce, SquareButton clickedButton){\r\n        Square clickedSquare = cb.getSquare(clickedButton); //get clicked square\r\n        Piece clickedPiece = clickedSquare.getPieceOnSq();\r\n        \r\n        if(wPlayer.getIsMyTurn()){ //if its the white turn\r\n            if(!diceClicked){ return false;}\r\n            if(!clickedOnce){ //and this click is the choice of which piece to move \r\n                if(!clickedSquare.isTakenSquare()){ return false; }    //if the sqaure is empty then do nothing\r\n                else if (clickedPiece.isWhite() && clickedPiece.getPieceName().equals(dice.getRoleDice()) ){ //if the player selected the correct piece to move\r\n                    heldPiece = clickedPiece;\r\n                    heldPiece.setHighlighted(true);\r\n                    highlightPiece(heldPiece, clickedSquare);\r\n                    System.out.println(\"legal first click\");\r\n                    buttonPanel.setText(\"legal first click\");\r\n\r\n                    return true;\r\n                }\r\n            }\r\n            else{ //if this is the second click\r\n                \r\n                if(heldPiece!=null && cb.getSquare(clickedButton).equals(heldPiece.getCurrentPosition())){   //if the player wants to move another piece\r\n                    heldPiece.setHighlighted(false);\r\n                    heldPiece=null;\r\n                    clickedOnce = false;\r\n                    System.out.println(\"released\");\r\n                    return true;\r\n                }\r\n                else if(heldPiece!=null && heldPiece.getLegalMoves(cb).contains(clickedSquare)){ //if the clicked square is in fact a legal one to move to\r\n                   \r\n                    int distance = Math.abs(clickedSquare.getXPos()-heldPiece.getCurrentPosition().getXPos());    //calculating the distance from the piece to desired moving location                \r\n                    \r\n                    if(heldPiece.getPieceName().equals(\"King\") && distance>1){                  //if the size of this movement is larger than 1 for the king it means this is castling\r\n                        ((King)heldPiece).doCastling(clickedSquare, cb, heldPiece);\r\n                        newTurn();\r\n                        return true;\r\n                    }\r\n                    if(heldPiece.getPieceName().equals(\"Pawn\") && clickedSquare.getYPos()==0){\r\n                        heldPiece.move(clickedSquare,cb, heldPiece.getLegalMoves(cb));\r\n                        Piece newPiece = clickedSquare.getPieceOnSq();\r\n                        ((Pawn)newPiece).promote(heldPiece.isWhite(),newPiece, clickedSquare, cb);\r\n                        newTurn();\r\n                        return true;\r\n                    }\r\n\r\n                    else{  //if its just a non castling move\r\n                        heldPiece.move(clickedSquare, cb, heldPiece.getLegalMoves(cb)); //move there    \r\n                        System.out.println(\"legal second click\");\r\n                        heldPiece.setHighlighted(false);\r\n                        heldPiece = null;\r\n                        newTurn();\r\n                        return true;\r\n                    }                    \r\n                }\r\n            }\r\n        }\r\n\r\n        else if(bPlayer.getIsMyTurn()){ //if its the black turn\r\n            if(!diceClicked){ return false;}\r\n            if(!clickedOnce){ //and this click is the choice of which piece to move \r\n                if(!clickedSquare.isTakenSquare()){ return false; }    //if the sqaure is empty then do nothing\r\n                else if (!clickedPiece.isWhite() && clickedPiece.getPieceName().equals(dice.getRoleDice()) ){ //if the player selected the correct piece to move\r\n                    heldPiece = clickedPiece;\r\n                    heldPiece.setHighlighted(true);\r\n                    highlightPiece(heldPiece, clickedSquare);\r\n                    System.out.println(\"legal first click\");\r\n                    return true;\r\n                }\r\n            }\r\n            else{ //if this is the second click\r\n                if(heldPiece!=null && cb.getSquare(clickedButton).equals(heldPiece.getCurrentPosition())){   //if the player wants to move another piece\r\n                    heldPiece.setHighlighted(false);\r\n                    heldPiece=null;\r\n                    clickedOnce = false;\r\n                    System.out.println(\"released\");\r\n                    updateBoard();\r\n                    return true;\r\n                }\r\n                else if(heldPiece!=null && heldPiece.getLegalMoves(cb).contains(clickedSquare)){ //if the clicked square is in fact a legal one to move to\r\n                    \r\n                    int distance = Math.abs(clickedSquare.getXPos()-heldPiece.getCurrentPosition().getXPos());    //calculating the distance from the piece to desired moving location                \r\n                    \r\n                    if(heldPiece.getPieceName().equals(\"King\") && distance>1){                  //if the size of this movement is larger than 1 for the king it means this is castling\r\n                        ((King)heldPiece).doCastling(clickedSquare,cb,heldPiece);\r\n                        newTurn();\r\n                        return true;\r\n                    }\r\n                    if(heldPiece.getPieceName().equals(\"Pawn\") && clickedSquare.getYPos()==7){\r\n                        heldPiece.move(clickedSquare,cb, heldPiece.getLegalMoves(cb));\r\n                        Piece newPiece = clickedSquare.getPieceOnSq();\r\n                        ((Pawn)newPiece).promote(heldPiece.isWhite(),newPiece, clickedSquare, cb);\r\n                        newTurn();\r\n                        return true;\r\n                    }\r\n\r\n                    else{  //if its just a non castling move\r\n                        heldPiece.move(clickedSquare, cb, heldPiece.getLegalMoves(cb)); //move there\r\n                        heldPiece.setHighlighted(false);\r\n                        heldPiece = null;    \r\n                        newTurn();\r\n                        System.out.println(\"legal second click\");\r\n                        return true;                    \r\n                    }\r\n                }\r\n            }    \r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * This repaints the board after any movement or capture\r\n     */\r\n    public void updateBoard(){\r\n        Square[][] board = cb.getBoard();\r\n        wPlayer.updateScore();  //accounting for any captures\r\n        bPlayer.updateScore();\r\n        for(int i=0; i<8; i++){\r\n            for(int j=0;j<8;j++){\r\n                if(board[i][j].isTakenSquare()){\r\n                    Piece occupying = board[i][j].getPieceOnSq();\r\n                    board[i][j].getButtonOnSquare().setIcon(occupying.getImgIcon());\r\n                }\r\n                else{\r\n                    board[i][j].getButtonOnSquare().setIcon(new ImageIcon());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method highlights a legal clicked piece\r\n     * @param piece is the piece in question needing highlighting\r\n     * @param square is the Square in question to highlight\r\n     */\r\n    public void highlightPiece(Piece piece, Square square) {\r\n        square.removeImage();\r\n\r\n        updateBoard();\r\n        square.placeImage(piece);\r\n    }\r\n\r\n    public boolean isNoMoves() { return noMoves; }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/controller/Game.java b/app/src/main/java/controller/Game.java
--- a/app/src/main/java/controller/Game.java	(revision 74f8e45c7572325eefe50f64508be21251dc3e5c)
+++ b/app/src/main/java/controller/Game.java	(date 1636638210977)
@@ -33,13 +33,14 @@
      * @param f is the ChessBoard GUI Frame 
      */
     
-    public Game(JFrame f){
+    public Game(JFrame f,boolean noAgent){
         this.f = f;
         cb = new ChessBoard();
         dice = new Dice();
         bPlayer = new BlackPlayer(cb);
         wPlayer = new WhitePlayer(cb);
         buttonPanel= new ButtonPanel(this);
+        this.noAgent=noAgent;
     }
     public JFrame getFrame(){
         return f;
Index: .idea/runConfigurations.xml
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
deleted file mode 100644
--- a/.idea/runConfigurations.xml	(revision 74f8e45c7572325eefe50f64508be21251dc3e5c)
+++ /dev/null	(revision 74f8e45c7572325eefe50f64508be21251dc3e5c)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RunConfigurationProducerService">
-    <option name="ignoredProducers">
-      <set>
-        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
-      </set>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"14\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 74f8e45c7572325eefe50f64508be21251dc3e5c)
+++ b/.idea/compiler.xml	(date 1636636183462)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="14" />
+    <bytecodeTargetLevel target="15" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_16\" default=\"true\" project-jdk-name=\"openjdk-16\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 74f8e45c7572325eefe50f64508be21251dc3e5c)
+++ b/.idea/misc.xml	(date 1636636215882)
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="openjdk-16" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_15" default="true" project-jdk-name="openjdk-16" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
